 vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
          // Convert input array to vector
    std::vector<Job> jobs(arr, arr+n);
    
    // Sort jobs in descending order of profit, and then by deadline if profits are equal
    std::sort(jobs.begin(), jobs.end(), compareJobs);
    
    // Initialize vector to track available slots at each deadline
    std::vector<int> slots(n, 0);
    
    // Initialize variables to keep track of number of jobs scheduled and maximum profit earned
    int count = 0, maxProfit = 0;
    
    // Iterate through the sorted jobs and try to schedule each job
    for(int i = 0; i < n; i++){
        // Try to find the latest available slot before the job's deadline
        for(int j = std::min(n, jobs[i].dead) - 1; j >= 0; j--){
            if(slots[j] == 0){
                // Schedule the job, update count and maxProfit, and mark slot as occupied
                count++;
                maxProfit += jobs[i].profit;
                slots[j] = 1;
                // Break out of the loop to indicate that the job has been scheduled
                break;
            }
        }
    }
    
    // Create a new vector to store the count and maxProfit, and return it
    std::vector<int> ans(2);
    ans[0] = count;
    ans[1] = maxProfit;
    return ans;
    } 
    
   static bool compareJobs(Job a, Job b) {
    if (a.profit != b.profit) {
        return a.profit > b.profit;
    }
    return a.dead > b.dead;
    } 
